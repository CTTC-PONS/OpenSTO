import sqlmodel
"""database initialization

Revision ID: 2d581724906c
Revises:
Create Date: 2024-11-21 15:06:20.802828

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2d581724906c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('capability',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsf_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('condition_capabilities', sa.JSON(), nullable=True),
    sa.Column('action_capabilities', sa.JSON(), nullable=True),
    sa.Column('nsf_specification', sa.JSON(), nullable=True),
    sa.Column('nsf_access_info', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('closedloopinitializationrequest',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsi_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nsr_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ns_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ns_port', sa.Integer(), nullable=False),
    sa.Column('cs_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cs_source_port', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cs_destination_port', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cs_source_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cs_destination_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsf_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('probe_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('probe_port', sa.Integer(), nullable=False),
    sa.Column('probe_username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('probe_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ssla_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tsla_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('firewall_type', sa.Enum('TFS', 'NONE', name='firewalltype'), nullable=False),
    sa.Column('firewall_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('firewall_port', sa.Integer(), nullable=False),
    sa.Column('firewall_username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('firewall_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('closed_loop_type', sa.Enum('E2E', 'DOMAIN', name='closedlooptype'), nullable=False),
    sa.Column('security_sls', sa.JSON(), nullable=True),
    sa.Column('trust_sls', sa.JSON(), nullable=True),
    sa.Column('xslap', sa.JSON(), nullable=True),
    sa.Column('e2e_cl_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsd_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('configurations', sa.JSON(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('controller',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('controller_type', sa.Enum('OSM', 'TFS', 'OPENSLICE', name='controllertype'), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('esslaaio',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('href', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sls', sa.JSON(), nullable=True),
    sa.Column('policies', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('firewall',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('TFS', 'NONE', name='firewalltype'), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ietfnetwork',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ietf_network', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nsd',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsd', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nsfinstance',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('TFS_FIREWALL', 'NONE', name='nsfinstancetype'), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nst',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('e2essla_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('e2etsla_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ns_list', sa.JSON(), nullable=True),
    sa.Column('cs_list', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('probe',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain_opensto_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain_opensto_port', sa.Integer(), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('topology',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('link',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('inter_domain_cross_connect', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('topology_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('node',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('DOMAIN', 'PROVIDER', 'ROUTER', 'DATACENTER', name='nodetype'), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('topology_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nsf',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ssla_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tsla_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vertical_service_nsr_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vertical_service_floating_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('trust_controller_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('closed_loop_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['closed_loop_id'], ['closedloopinitializationrequest.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nsi',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nst_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('e2essla_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('e2etsla_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ns_list', sa.JSON(), nullable=True),
    sa.Column('cs_list', sa.JSON(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['nst_ref'], ['nst.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('openstoservice',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ssla_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mano_services_info', sa.JSON(), nullable=True),
    sa.Column('wim_services_info', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['ssla_id'], ['esslaaio.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('endpoint',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('inter_domain_cross_connect', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('topology_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('link_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['link_id'], ['link.id'], ),
    sa.ForeignKeyConstraint(['node_id'], ['node.id'], ),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nsinfo',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsf_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nsi_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estsla_dict', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['nsf_id'], ['nsf.id'], ),
    sa.ForeignKeyConstraint(['nsi_id'], ['nsi.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('wimserviceinfo',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nsf_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nsi_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estsla_dict', sa.JSON(), nullable=True),
    sa.Column('path', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['nsf_id'], ['nsf.id'], ),
    sa.ForeignKeyConstraint(['nsi_id'], ['nsi.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vnfinfo',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('floating_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ns_info_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['ns_info_id'], ['nsinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nfinterface',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mac', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vnf_info_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['vnf_info_id'], ['vnfinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nfinterface')
    op.drop_table('vnfinfo')
    op.drop_table('wimserviceinfo')
    op.drop_table('nsinfo')
    op.drop_table('endpoint')
    op.drop_table('openstoservice')
    op.drop_table('nsi')
    op.drop_table('nsf')
    op.drop_table('node')
    op.drop_table('link')
    op.drop_table('topology')
    op.drop_table('provider')
    op.drop_table('probe')
    op.drop_table('nst')
    op.drop_table('nsfinstance')
    op.drop_table('nsd')
    op.drop_table('ietfnetwork')
    op.drop_table('firewall')
    op.drop_table('esslaaio')
    op.drop_table('controller')
    op.drop_table('closedloopinitializationrequest')
    op.drop_table('capability')
    # ### end Alembic commands ###
